{"version":3,"file":"index.modern.js","sources":["../src/Delaunay.js","../src/Simplex.js"],"sourcesContent":["const EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nclass Delaunator {\n    static from(points) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = p[0];\n            coords[2 * i + 1] = p[1];\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = 2 * n - 5;\n        const triangles = this.triangles = new Uint32Array(maxTriangles * 3);\n        const halfedges = this.halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        const hullPrev = this.hullPrev = new Uint32Array(n); // edge to prev edge\n        const hullNext = this.hullNext = new Uint32Array(n); // edge to next edge\n        const hullTri = this.hullTri = new Uint32Array(n); // edge to adjacent triangle\n        const hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // populate an array of point indices; calculate input data bbox\n        const ids = new Uint32Array(n);\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            throw new Error('No Delaunay triangulation exists for this input.');\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        const dists = new Float64Array(n);\n        for (let i = 0; i < n; i++) {\n            dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(ids, dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this.hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < ids.length; k++) {\n            const i = ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this.hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this.hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n        this.hullPrev = this.hullNext = this.hullTri = null; // get rid of temporary arrays\n\n        // trim typed triangle mesh arrays\n        this.triangles = triangles.subarray(0, this.trianglesLen);\n        this.halfedges = halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {triangles, coords, halfedges} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this.hullStart;\n                    do {\n                        if (this.hullTri[e] === bl) {\n                            this.hullTri[e] = a;\n                            break;\n                        }\n                        e = this.hullNext[e];\n                    } while (e !== this.hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this.halfedges[a] = b;\n        if (b !== -1) this.halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this.triangles[t] = i0;\n        this.triangles[t + 1] = i1;\n        this.triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nfunction orient(px, py, qx, qy, rx, ry) {\n    return (qy - py) * (rx - qx) - (qx - px) * (ry - qy) < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nexport { Delaunator, swap, quicksort, circumcenter, circumradius, inCircle, orient, dist, pseudoAngle }","////////////////////////////////////////////////////////////////\n// Simplex Noise utility code. Created by Reinder Nijhoff 2020\n// https://turtletoy.net/turtle/6e4e06d42e\n// Based on: http://webstaff.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n////////////////////////////////////////////////////////////////\nfunction SimplexNoise(seed = 1) {\n  const grad = [\n    [1, 1, 0],\n    [-1, 1, 0],\n    [1, -1, 0],\n    [-1, -1, 0],\n    [1, 0, 1],\n    [-1, 0, 1],\n    [1, 0, -1],\n    [-1, 0, -1],\n    [0, 1, 1],\n    [0, -1, 1],\n    [0, 1, -1],\n    [0, -1, -1]\n  ]\n  const perm = new Uint8Array(512)\n\n  const F2 = (Math.sqrt(3) - 1) / 2,\n    F3 = 1 / 3\n  const G2 = (3 - Math.sqrt(3)) / 6,\n    G3 = 1 / 6\n\n  const dot2 = (a, b) => a[0] * b[0] + a[1] * b[1]\n  const sub2 = (a, b) => [a[0] - b[0], a[1] - b[1]]\n  const dot3 = (a, b) => a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n  const sub3 = (a, b) => [a[0] - b[0], a[1] - b[1], a[2] - b[2]]\n\n  class SimplexNoise {\n    constructor(seed = 1) {\n      for (let i = 0; i < 512; i++) {\n        perm[i] = i & 255\n      }\n      for (let i = 0; i < 255; i++) {\n        const r = ((seed = this.hash(i + seed)) % (256 - i)) + i\n        const swp = perm[i]\n        perm[i + 256] = perm[i] = perm[r]\n        perm[r + 256] = perm[r] = swp\n      }\n    }\n    noise2D(p) {\n      const s = dot2(p, [F2, F2])\n      const c = [Math.floor(p[0] + s), Math.floor(p[1] + s)]\n      const i = c[0] & 255,\n        j = c[1] & 255\n      const t = dot2(c, [G2, G2])\n\n      const p0 = sub2(p, sub2(c, [t, t]))\n      const o = p0[0] > p0[1] ? [1, 0] : [0, 1]\n      const p1 = sub2(sub2(p0, o), [-G2, -G2])\n      const p2 = sub2(p0, [1 - 2 * G2, 1 - 2 * G2])\n\n      let n =\n        Math.max(0, 0.5 - dot2(p0, p0)) ** 4 *\n        dot2(grad[perm[i + perm[j]] % 12], p0)\n      n +=\n        Math.max(0, 0.5 - dot2(p1, p1)) ** 4 *\n        dot2(grad[perm[i + o[0] + perm[j + o[1]]] % 12], p1)\n      n +=\n        Math.max(0, 0.5 - dot2(p2, p2)) ** 4 *\n        dot2(grad[perm[i + 1 + perm[j + 1]] % 12], p2)\n\n      return 70 * n\n    }\n    hash(i) {\n      i = 1103515245 * ((i >> 1) ^ i)\n      const h32 = 1103515245 * (i ^ (i >> 3))\n      return h32 ^ (h32 >> 16)\n    }\n  }\n  return new SimplexNoise(seed)\n}\n\nexport { SimplexNoise }"],"names":["EPSILON","Math","pow","EDGE_STACK","Uint32Array","Delaunator","from","points","n","length","coords","Float64Array","i","p","constructor","Error","this","maxTriangles","triangles","halfedges","Int32Array","_hashSize","ceil","sqrt","hullPrev","hullNext","hullTri","hullHash","fill","ids","minX","Infinity","minY","maxX","maxY","x","y","cx","cy","i0","i1","i2","minDist","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","orient","center","circumcenter","_cx","_cy","dists","quicksort","hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","xp","yp","k","abs","start","j","key","q","e","t","_legalize","hull","subarray","floor","pseudoAngle","a","ar","b","a0","b0","bl","p0","pr","pl","p1","inCircle","hbl","_link","br","c","dx","dy","ax","ay","bx","by","px","py","qx","qy","rx","ry","ex","ey","fx","fy","bp","cp","cl","left","right","temp","tempDist","swap","arr","tmp","SimplexNoise","seed","grad","perm","Uint8Array","F2","G2","dot2","sub2","hash","swp","noise2D","s","o","p2","max","h32"],"mappings":"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"}