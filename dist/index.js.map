{"version":3,"file":"index.js","sources":["../src/Delaunay.js","../src/Simplex.js"],"sourcesContent":["const EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nclass Delaunator {\n    static from(points) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = p[0];\n            coords[2 * i + 1] = p[1];\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = 2 * n - 5;\n        const triangles = this.triangles = new Uint32Array(maxTriangles * 3);\n        const halfedges = this.halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        const hullPrev = this.hullPrev = new Uint32Array(n); // edge to prev edge\n        const hullNext = this.hullNext = new Uint32Array(n); // edge to next edge\n        const hullTri = this.hullTri = new Uint32Array(n); // edge to adjacent triangle\n        const hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // populate an array of point indices; calculate input data bbox\n        const ids = new Uint32Array(n);\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            throw new Error('No Delaunay triangulation exists for this input.');\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        const dists = new Float64Array(n);\n        for (let i = 0; i < n; i++) {\n            dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(ids, dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this.hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < ids.length; k++) {\n            const i = ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this.hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this.hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n        this.hullPrev = this.hullNext = this.hullTri = null; // get rid of temporary arrays\n\n        // trim typed triangle mesh arrays\n        this.triangles = triangles.subarray(0, this.trianglesLen);\n        this.halfedges = halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {triangles, coords, halfedges} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this.hullStart;\n                    do {\n                        if (this.hullTri[e] === bl) {\n                            this.hullTri[e] = a;\n                            break;\n                        }\n                        e = this.hullNext[e];\n                    } while (e !== this.hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this.halfedges[a] = b;\n        if (b !== -1) this.halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this.triangles[t] = i0;\n        this.triangles[t + 1] = i1;\n        this.triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nfunction orient(px, py, qx, qy, rx, ry) {\n    return (qy - py) * (rx - qx) - (qx - px) * (ry - qy) < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nexport { Delaunator, swap, quicksort, circumcenter, circumradius, inCircle, orient, dist, pseudoAngle }","////////////////////////////////////////////////////////////////\n// Simplex Noise utility code. Created by Reinder Nijhoff 2020\n// https://turtletoy.net/turtle/6e4e06d42e\n// Based on: http://webstaff.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n////////////////////////////////////////////////////////////////\nfunction SimplexNoise(seed = 1) {\n  const grad = [\n    [1, 1, 0],\n    [-1, 1, 0],\n    [1, -1, 0],\n    [-1, -1, 0],\n    [1, 0, 1],\n    [-1, 0, 1],\n    [1, 0, -1],\n    [-1, 0, -1],\n    [0, 1, 1],\n    [0, -1, 1],\n    [0, 1, -1],\n    [0, -1, -1]\n  ]\n  const perm = new Uint8Array(512)\n\n  const F2 = (Math.sqrt(3) - 1) / 2,\n    F3 = 1 / 3\n  const G2 = (3 - Math.sqrt(3)) / 6,\n    G3 = 1 / 6\n\n  const dot2 = (a, b) => a[0] * b[0] + a[1] * b[1]\n  const sub2 = (a, b) => [a[0] - b[0], a[1] - b[1]]\n  const dot3 = (a, b) => a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n  const sub3 = (a, b) => [a[0] - b[0], a[1] - b[1], a[2] - b[2]]\n\n  class SimplexNoise {\n    constructor(seed = 1) {\n      for (let i = 0; i < 512; i++) {\n        perm[i] = i & 255\n      }\n      for (let i = 0; i < 255; i++) {\n        const r = ((seed = this.hash(i + seed)) % (256 - i)) + i\n        const swp = perm[i]\n        perm[i + 256] = perm[i] = perm[r]\n        perm[r + 256] = perm[r] = swp\n      }\n    }\n    noise2D(p) {\n      const s = dot2(p, [F2, F2])\n      const c = [Math.floor(p[0] + s), Math.floor(p[1] + s)]\n      const i = c[0] & 255,\n        j = c[1] & 255\n      const t = dot2(c, [G2, G2])\n\n      const p0 = sub2(p, sub2(c, [t, t]))\n      const o = p0[0] > p0[1] ? [1, 0] : [0, 1]\n      const p1 = sub2(sub2(p0, o), [-G2, -G2])\n      const p2 = sub2(p0, [1 - 2 * G2, 1 - 2 * G2])\n\n      let n =\n        Math.max(0, 0.5 - dot2(p0, p0)) ** 4 *\n        dot2(grad[perm[i + perm[j]] % 12], p0)\n      n +=\n        Math.max(0, 0.5 - dot2(p1, p1)) ** 4 *\n        dot2(grad[perm[i + o[0] + perm[j + o[1]]] % 12], p1)\n      n +=\n        Math.max(0, 0.5 - dot2(p2, p2)) ** 4 *\n        dot2(grad[perm[i + 1 + perm[j + 1]] % 12], p2)\n\n      return 70 * n\n    }\n    hash(i) {\n      i = 1103515245 * ((i >> 1) ^ i)\n      const h32 = 1103515245 * (i ^ (i >> 3))\n      return h32 ^ (h32 >> 16)\n    }\n  }\n  return new SimplexNoise(seed)\n}\n\nexport { SimplexNoise }"],"names":["EPSILON","Math","pow","EDGE_STACK","Uint32Array","pseudoAngle","dx","dy","p","abs","dist","ax","ay","bx","by","orient","px","py","qx","qy","rx","ry","inCircle","cx","cy","ex","ey","fx","fy","bp","cp","circumradius","bl","cl","d","x","y","circumcenter","quicksort","ids","dists","left","right","i","temp","tempDist","j","swap","arr","tmp","coords","n","length","Error","this","maxTriangles","triangles","halfedges","Int32Array","_hashSize","ceil","sqrt","hullPrev","hullNext","hullTri","hullHash","fill","minX","Infinity","minY","maxX","maxY","i0","i1","i2","minDist","i0x","i0y","i1x","i1y","minRadius","r","i2x","i2y","center","_cx","_cy","Float64Array","hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","xp","yp","k","start","key","e","q","t","_legalize","hull","subarray","from","points","Delaunator","floor","a","ar","b","a0","b0","p0","pr","pl","p1","hbl","_link","c","seed","grad","perm","Uint8Array","F2","G2","dot2","sub2","hash","swp","noise2D","s","o","p2","max","h32"],"mappings":"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"}