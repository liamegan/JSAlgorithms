{"version":3,"file":"index.module.js","sources":["../src/Delaunay.js","../src/Simplex.js"],"sourcesContent":["const EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nclass Delaunator {\n    static from(points) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = p[0];\n            coords[2 * i + 1] = p[1];\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = 2 * n - 5;\n        const triangles = this.triangles = new Uint32Array(maxTriangles * 3);\n        const halfedges = this.halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        const hullPrev = this.hullPrev = new Uint32Array(n); // edge to prev edge\n        const hullNext = this.hullNext = new Uint32Array(n); // edge to next edge\n        const hullTri = this.hullTri = new Uint32Array(n); // edge to adjacent triangle\n        const hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // populate an array of point indices; calculate input data bbox\n        const ids = new Uint32Array(n);\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            throw new Error('No Delaunay triangulation exists for this input.');\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        const dists = new Float64Array(n);\n        for (let i = 0; i < n; i++) {\n            dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(ids, dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this.hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < ids.length; k++) {\n            const i = ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this.hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this.hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n        this.hullPrev = this.hullNext = this.hullTri = null; // get rid of temporary arrays\n\n        // trim typed triangle mesh arrays\n        this.triangles = triangles.subarray(0, this.trianglesLen);\n        this.halfedges = halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {triangles, coords, halfedges} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this.hullStart;\n                    do {\n                        if (this.hullTri[e] === bl) {\n                            this.hullTri[e] = a;\n                            break;\n                        }\n                        e = this.hullNext[e];\n                    } while (e !== this.hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this.halfedges[a] = b;\n        if (b !== -1) this.halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this.triangles[t] = i0;\n        this.triangles[t + 1] = i1;\n        this.triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nfunction orient(px, py, qx, qy, rx, ry) {\n    return (qy - py) * (rx - qx) - (qx - px) * (ry - qy) < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nexport { Delaunator, swap, quicksort, circumcenter, circumradius, inCircle, orient, dist, pseudoAngle }","////////////////////////////////////////////////////////////////\n// Simplex Noise utility code. Created by Reinder Nijhoff 2020\n// https://turtletoy.net/turtle/6e4e06d42e\n// Based on: http://webstaff.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n////////////////////////////////////////////////////////////////\nfunction SimplexNoise(seed = 1) {\n  const grad = [\n    [1, 1, 0],\n    [-1, 1, 0],\n    [1, -1, 0],\n    [-1, -1, 0],\n    [1, 0, 1],\n    [-1, 0, 1],\n    [1, 0, -1],\n    [-1, 0, -1],\n    [0, 1, 1],\n    [0, -1, 1],\n    [0, 1, -1],\n    [0, -1, -1]\n  ]\n  const perm = new Uint8Array(512)\n\n  const F2 = (Math.sqrt(3) - 1) / 2,\n    F3 = 1 / 3\n  const G2 = (3 - Math.sqrt(3)) / 6,\n    G3 = 1 / 6\n\n  const dot2 = (a, b) => a[0] * b[0] + a[1] * b[1]\n  const sub2 = (a, b) => [a[0] - b[0], a[1] - b[1]]\n  const dot3 = (a, b) => a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n  const sub3 = (a, b) => [a[0] - b[0], a[1] - b[1], a[2] - b[2]]\n\n  class SimplexNoise {\n    constructor(seed = 1) {\n      for (let i = 0; i < 512; i++) {\n        perm[i] = i & 255\n      }\n      for (let i = 0; i < 255; i++) {\n        const r = ((seed = this.hash(i + seed)) % (256 - i)) + i\n        const swp = perm[i]\n        perm[i + 256] = perm[i] = perm[r]\n        perm[r + 256] = perm[r] = swp\n      }\n    }\n    noise2D(p) {\n      const s = dot2(p, [F2, F2])\n      const c = [Math.floor(p[0] + s), Math.floor(p[1] + s)]\n      const i = c[0] & 255,\n        j = c[1] & 255\n      const t = dot2(c, [G2, G2])\n\n      const p0 = sub2(p, sub2(c, [t, t]))\n      const o = p0[0] > p0[1] ? [1, 0] : [0, 1]\n      const p1 = sub2(sub2(p0, o), [-G2, -G2])\n      const p2 = sub2(p0, [1 - 2 * G2, 1 - 2 * G2])\n\n      let n =\n        Math.max(0, 0.5 - dot2(p0, p0)) ** 4 *\n        dot2(grad[perm[i + perm[j]] % 12], p0)\n      n +=\n        Math.max(0, 0.5 - dot2(p1, p1)) ** 4 *\n        dot2(grad[perm[i + o[0] + perm[j + o[1]]] % 12], p1)\n      n +=\n        Math.max(0, 0.5 - dot2(p2, p2)) ** 4 *\n        dot2(grad[perm[i + 1 + perm[j + 1]] % 12], p2)\n\n      return 70 * n\n    }\n    hash(i) {\n      i = 1103515245 * ((i >> 1) ^ i)\n      const h32 = 1103515245 * (i ^ (i >> 3))\n      return h32 ^ (h32 >> 16)\n    }\n  }\n  return new SimplexNoise(seed)\n}\n\nexport { SimplexNoise }"],"names":["EPSILON","Math","pow","EDGE_STACK","Uint32Array","Delaunator","coords","n","length","Error","this","maxTriangles","triangles","halfedges","Int32Array","_hashSize","ceil","sqrt","hullPrev","hullNext","hullTri","hullHash","fill","ids","minX","Infinity","minY","maxX","maxY","i","x","y","i0","i1","i2","cx","cy","minDist","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","orient","center","circumcenter","_cx","_cy","dists","Float64Array","quicksort","hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","xp","yp","k","abs","start","j","key","e","q","t","_legalize","hull","subarray","from","points","p","floor","pseudoAngle","a","ar","b","a0","b0","bl","p0","pr","pl","p1","inCircle","hbl","_link","c","dx","dy","ax","ay","bx","by","px","py","qx","qy","rx","ry","ex","ey","fx","fy","bp","cp","cl","left","right","temp","tempDist","swap","arr","tmp","SimplexNoise","seed","grad","perm","Uint8Array","F2","G2","dot2","sub2","hash","swp","noise2D","s","o","p2","max","h32"],"mappings":"AAAA,IAAMA,EAAUC,KAAKC,IAAI,GAAI,IACvBC,EAAa,IAAIC,YAAY,KAE7BC,aAcF,WAAYC,GACR,IAAMC,EAAID,EAAOE,QAAU,EAC3B,GAAID,EAAI,GAA0B,iBAAdD,EAAO,GAAiB,UAAUG,MAAM,uCAE5DC,KAAKJ,OAASA,EAGd,IAAMK,EAAe,EAAIJ,EAAI,EACvBK,EAAYF,KAAKE,UAAY,IAAIR,YAA2B,EAAfO,GAC7CE,EAAYH,KAAKG,UAAY,IAAIC,WAA0B,EAAfH,GAGlDD,KAAKK,UAAYd,KAAKe,KAAKf,KAAKgB,KAAKV,IAarC,IAZA,IAAMW,EAAWR,KAAKQ,SAAW,IAAId,YAAYG,GAC3CY,EAAWT,KAAKS,SAAW,IAAIf,YAAYG,GAC3Ca,EAAUV,KAAKU,QAAU,IAAIhB,YAAYG,GACzCc,EAAW,IAAIP,WAAWJ,KAAKK,WAAWO,MAAM,GAGhDC,EAAM,IAAInB,YAAYG,GACxBiB,EAAOC,SACPC,EAAOD,SACPE,GAAQF,SACRG,GAAQH,SAEHI,EAAI,EAAGA,EAAItB,EAAGsB,IAAK,CACxB,IAAMC,EAAIxB,EAAO,EAAIuB,GACfE,EAAIzB,EAAO,EAAIuB,EAAI,GACrBC,EAAIN,IAAMA,EAAOM,GACjBC,EAAIL,IAAMA,EAAOK,GACjBD,EAAIH,IAAMA,EAAOG,GACjBC,EAAIH,IAAMA,EAAOG,GACrBR,EAAIM,GAAKA,EASb,IAPA,IAIIG,EAAIC,EAAIC,EAJNC,GAAMX,EAAOG,GAAQ,EACrBS,GAAMV,EAAOE,GAAQ,EAEvBS,EAAUZ,SAILI,EAAI,EAAGA,EAAItB,EAAGsB,IAAK,CACxB,IAAMS,EAAIC,EAAKJ,EAAIC,EAAI9B,EAAO,EAAIuB,GAAIvB,EAAO,EAAIuB,EAAI,IACjDS,EAAID,IACJL,EAAKH,EACLQ,EAAUC,GAGlB,IAAME,EAAMlC,EAAO,EAAI0B,GACjBS,EAAMnC,EAAO,EAAI0B,EAAK,GAE5BK,EAAUZ,SAGV,IAAK,IAAII,EAAI,EAAGA,EAAItB,EAAGsB,IACnB,GAAIA,IAAMG,EAAV,CACA,IAAMM,EAAIC,EAAKC,EAAKC,EAAKnC,EAAO,EAAIuB,GAAIvB,EAAO,EAAIuB,EAAI,IACnDS,EAAID,GAAWC,EAAI,IACnBL,EAAKJ,EACLQ,EAAUC,GASlB,IANA,IAAII,EAAMpC,EAAO,EAAI2B,GACjBU,EAAMrC,EAAO,EAAI2B,EAAK,GAEtBW,EAAYnB,SAGPI,EAAI,EAAGA,EAAItB,EAAGsB,IACnB,GAAIA,IAAMG,GAAMH,IAAMI,EAAtB,CACA,IAAMY,EAAIC,EAAaN,EAAKC,EAAKC,EAAKC,EAAKrC,EAAO,EAAIuB,GAAIvB,EAAO,EAAIuB,EAAI,IACrEgB,EAAID,IACJV,EAAKL,EACLe,EAAYC,GAGpB,IAAIE,EAAMzC,EAAO,EAAI4B,GACjBc,EAAM1C,EAAO,EAAI4B,EAAK,GAE1B,GAAkBT,WAAdmB,EACA,UAAUnC,MAAM,oDAIpB,GAAIwC,EAAOT,EAAKC,EAAKC,EAAKC,EAAKI,EAAKC,GAAM,CACtC,IAAMnB,EAAII,EACJH,EAAIY,EACJX,EAAIY,EACVV,EAAKC,EACLQ,EAAMK,EACNJ,EAAMK,EACNd,EAAKL,EACLkB,EAAMjB,EACNkB,EAAMjB,EAGV,IAAMmB,EAASC,EAAaX,EAAKC,EAAKC,EAAKC,EAAKI,EAAKC,GACrDtC,KAAK0C,IAAMF,EAAOpB,EAClBpB,KAAK2C,IAAMH,EAAOnB,EAGlB,IADA,IAAMuB,EAAQ,IAAIC,aAAahD,GACtBsB,EAAI,EAAGA,EAAItB,EAAGsB,IACnByB,EAAMzB,GAAKU,EAAKjC,EAAO,EAAIuB,GAAIvB,EAAO,EAAIuB,EAAI,GAAIqB,EAAOpB,EAAGoB,EAAOnB,GAIvEyB,EAAUjC,EAAK+B,EAAO,EAAG/C,EAAI,GAG7BG,KAAK+C,UAAYzB,EACjB,IAAI0B,EAAW,EAEfvC,EAASa,GAAMd,EAASgB,GAAMD,EAC9Bd,EAASc,GAAMf,EAASc,GAAME,EAC9Bf,EAASe,GAAMhB,EAASe,GAAMD,EAE9BZ,EAAQY,GAAM,EACdZ,EAAQa,GAAM,EACdb,EAAQc,GAAM,EAEdb,EAASX,KAAKiD,SAASnB,EAAKC,IAAQT,EACpCX,EAASX,KAAKiD,SAASjB,EAAKC,IAAQV,EACpCZ,EAASX,KAAKiD,SAASZ,EAAKC,IAAQd,EAEpCxB,KAAKkD,aAAe,EACpBlD,KAAKmD,aAAa7B,EAAIC,EAAIC,GAAK,GAAI,GAAI,GAEvC,IAAK,IAAW4B,EAAIC,EAAXC,EAAI,EAAWA,EAAIzC,EAAIf,OAAQwD,IAAK,CACzC,IAAMnC,EAAIN,EAAIyC,GACRlC,EAAIxB,EAAO,EAAIuB,GACfE,GAAIzB,EAAO,EAAIuB,EAAI,GAGzB,KAAImC,EAAI,GAAK/D,KAAKgE,IAAInC,EAAIgC,IAAO9D,GAAWC,KAAKgE,IAAIlC,GAAIgC,IAAO/D,KAChE8D,EAAKhC,EACLiC,EAAKhC,GAGDF,IAAMG,GAAMH,IAAMI,GAAMJ,IAAMK,GAAlC,CAIA,IADA,IAAIgC,GAAQ,EACHC,GAAI,EAAGC,GAAM1D,KAAKiD,SAAS7B,EAAGC,IAAIoC,GAAIzD,KAAKK,aAEjC,KADfmD,GAAQ7C,GAAU+C,GAAMD,IAAKzD,KAAKK,aACdmD,KAAU/C,EAAS+C,KAFoBC,MAO/D,IADA,IAAIE,GADJH,GAAQhD,EAASgD,IACFI,WACUrB,EAAOnB,EAAGC,GAAGzB,EAAO,EAAI+D,IAAI/D,EAAO,EAAI+D,GAAI,GAAI/D,EAAO,GAAxEgE,GAAInD,EAASkD,MAAmE/D,EAAO,EAAIgE,GAAI,KAElG,IADAD,GAAIC,MACMJ,GAAO,CACbG,IAAK,EACL,MAGR,IAAW,IAAPA,GAAJ,CAGA,IAAIE,GAAI7D,KAAKmD,aAAaQ,GAAGxC,EAAGV,EAASkD,KAAK,GAAI,EAAGjD,EAAQiD,KAG7DjD,EAAQS,GAAKnB,KAAK8D,UAAUD,GAAI,GAChCnD,EAAQiD,IAAKE,GACbb,IAIA,IADA,IAAInD,GAAIY,EAASkD,IACOpB,EAAOnB,EAAGC,GAAGzB,EAAO,EAAIC,IAAID,EAAO,EAAIC,GAAI,GAAID,EAAO,GAAvEgE,GAAInD,EAASZ,MAAkED,EAAO,EAAIgE,GAAI,KACjGC,GAAI7D,KAAKmD,aAAatD,GAAGsB,EAAGyC,GAAGlD,EAAQS,IAAK,EAAGT,EAAQb,KACvDa,EAAQS,GAAKnB,KAAK8D,UAAUD,GAAI,GAChCpD,EAASZ,IAAKA,GACdmD,IACAnD,GAAI+D,GAIR,GAAID,KAAMH,GACN,KAAwBjB,EAAOnB,EAAGC,GAAGzB,EAAO,GAArCgE,GAAIpD,EAASmD,MAAgC/D,EAAO,EAAIgE,GAAI,GAAIhE,EAAO,EAAI+D,IAAI/D,EAAO,EAAI+D,GAAI,KACjGE,GAAI7D,KAAKmD,aAAaS,GAAGzC,EAAGwC,IAAI,EAAGjD,EAAQiD,IAAIjD,EAAQkD,KACvD5D,KAAK8D,UAAUD,GAAI,GACnBnD,EAAQkD,IAAKC,GACbpD,EAASkD,IAAKA,GACdX,IACAW,GAAIC,GAKZ5D,KAAK+C,UAAYvC,EAASW,GAAKwC,GAC/BlD,EAASkD,IAAKnD,EAASX,IAAKsB,EAC5BV,EAASU,GAAKtB,GAGdc,EAASX,KAAKiD,SAAS7B,EAAGC,KAAMF,EAChCR,EAASX,KAAKiD,SAASrD,EAAO,EAAI+D,IAAI/D,EAAO,EAAI+D,GAAI,KAAOA,KAGhE3D,KAAK+D,KAAO,IAAIrE,YAAYsD,GAC5B,IAAK,IAAI7B,GAAI,EAAGwC,GAAI3D,KAAK+C,UAAW5B,GAAI6B,EAAU7B,KAC9CnB,KAAK+D,KAAK5C,IAAKwC,GACfA,GAAIlD,EAASkD,IAEjB3D,KAAKQ,SAAWR,KAAKS,SAAWT,KAAKU,QAAU,KAG/CV,KAAKE,UAAYA,EAAU8D,SAAS,EAAGhE,KAAKkD,cAC5ClD,KAAKG,UAAYA,EAAU6D,SAAS,EAAGhE,KAAKkD,gBA5NzCe,KAAP,SAAYC,GAIR,IAHA,IAAMrE,EAAIqE,EAAOpE,OACXF,EAAS,IAAIiD,aAAiB,EAAJhD,GAEvBsB,EAAI,EAAGA,EAAItB,EAAGsB,IAAK,CACxB,IAAMgD,EAAID,EAAO/C,GACjBvB,EAAO,EAAIuB,GAAKgD,EAAE,GAClBvE,EAAO,EAAIuB,EAAI,GAAKgD,EAAE,GAG1B,WAAWxE,EAAWC,+BAqN1BqD,SAAA,SAAS7B,EAAGC,GACR,OAAO9B,KAAK6E,MAAMC,EAAYjD,EAAIpB,KAAK0C,IAAKrB,EAAIrB,KAAK2C,KAAO3C,KAAKK,WAAaL,KAAKK,aAGvFyD,UAAA,SAAUQ,GAON,IANA,IAAOpE,EAAgCF,KAAhCE,UAAWN,EAAqBI,KAArBJ,OAAQO,EAAaH,KAAbG,UAEtBgB,EAAI,EACJoD,EAAK,IAGI,CACT,IAAMC,EAAIrE,EAAUmE,GAiBdG,EAAKH,EAAIA,EAAI,EAGnB,GAFAC,EAAKE,GAAMH,EAAI,GAAK,GAET,IAAPE,EAAJ,CAMA,IAAME,EAAKF,EAAIA,EAAI,EAEbG,EAAKD,GAAMF,EAAI,GAAK,EAEpBI,EAAK1E,EAAUqE,GACfM,EAAK3E,EAAUoE,GACfQ,EAAK5E,EALAuE,GAAMH,EAAI,GAAK,GAMpBS,EAAK7E,EAAUyE,GAQrB,GANgBK,EACZpF,EAAO,EAAIgF,GAAKhF,EAAO,EAAIgF,EAAK,GAChChF,EAAO,EAAIiF,GAAKjF,EAAO,EAAIiF,EAAK,GAChCjF,EAAO,EAAIkF,GAAKlF,EAAO,EAAIkF,EAAK,GAChClF,EAAO,EAAImF,GAAKnF,EAAO,EAAImF,EAAK,IAEvB,CACT7E,EAAUoE,GAAKS,EACf7E,EAAUsE,GAAKI,EAEf,IAAMK,EAAM9E,EAAUwE,GAGtB,IAAa,IAATM,EAAY,CACZ,IAAItB,EAAI3D,KAAK+C,UACb,EAAG,CACC,GAAI/C,KAAKU,QAAQiD,KAAOgB,EAAI,CACxB3E,KAAKU,QAAQiD,GAAKW,EAClB,MAEJX,EAAI3D,KAAKS,SAASkD,SACbA,IAAM3D,KAAK+C,WAExB/C,KAAKkF,MAAMZ,EAAGW,GACdjF,KAAKkF,MAAMV,EAAGrE,EAAUoE,IACxBvE,KAAKkF,MAAMX,EAAII,GAKXxD,EAAI1B,EAAWK,SACfL,EAAW0B,KAJJuD,GAAMF,EAAI,GAAK,OAMvB,CACH,GAAU,IAANrD,EAAS,MACbmD,EAAI7E,IAAa0B,QAlDrB,CACI,GAAU,IAANA,EAAS,MACbmD,EAAI7E,IAAa0B,IAoDzB,OAAOoD,KAGXW,MAAA,SAAMZ,EAAGE,GACLxE,KAAKG,UAAUmE,GAAKE,GACT,IAAPA,IAAUxE,KAAKG,UAAUqE,GAAKF,MAItCnB,aAAA,SAAa7B,EAAIC,EAAIC,EAAI8C,EAAGE,EAAGW,GAC3B,IAAMtB,EAAI7D,KAAKkD,aAYf,OAVAlD,KAAKE,UAAU2D,GAAKvC,EACpBtB,KAAKE,UAAU2D,EAAI,GAAKtC,EACxBvB,KAAKE,UAAU2D,EAAI,GAAKrC,EAExBxB,KAAKkF,MAAMrB,EAAGS,GACdtE,KAAKkF,MAAMrB,EAAI,EAAGW,GAClBxE,KAAKkF,MAAMrB,EAAI,EAAGsB,GAElBnF,KAAKkD,cAAgB,EAEdW,QAKf,SAASQ,EAAYe,EAAIC,GACrB,IAAMlB,EAAIiB,GAAM7F,KAAKgE,IAAI6B,GAAM7F,KAAKgE,IAAI8B,IACxC,OAAQA,EAAK,EAAI,EAAIlB,EAAI,EAAIA,GAAK,EAGtC,SAAStC,EAAKyD,EAAIC,EAAIC,EAAIC,GACtB,IAAML,EAAKE,EAAKE,EACVH,EAAKE,EAAKE,EAChB,OAAOL,EAAKA,EAAKC,EAAKA,EAG1B,SAAS9C,EAAOmD,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAChC,OAAQF,EAAKF,IAAOG,EAAKF,IAAOA,EAAKF,IAAOK,EAAKF,GAAM,EAG3D,SAASb,EAASM,EAAIC,EAAIC,EAAIC,EAAIhE,EAAIC,EAAIgE,EAAIC,GAC1C,IAAMP,EAAKE,EAAKI,EACVL,EAAKE,EAAKI,EACVK,EAAKR,EAAKE,EACVO,EAAKR,EAAKE,EACVO,EAAKzE,EAAKiE,EACVS,EAAKzE,EAAKiE,EAGVS,EAAKJ,EAAKA,EAAKC,EAAKA,EACpBI,EAAKH,EAAKA,EAAKC,EAAKA,EAE1B,OAAOf,GAAMa,EAAKI,EAAKD,EAAKD,GACrBd,GAAMW,EAAKK,EAAKD,EAAKF,IALjBd,EAAKA,EAAKC,EAAKA,IAMbW,EAAKG,EAAKF,EAAKC,GAAM,EAGtC,SAAS9D,EAAakD,EAAIC,EAAIC,EAAIC,EAAIhE,EAAIC,GACtC,IAAM0D,EAAKI,EAAKF,EACVD,EAAKI,EAAKF,EACVS,EAAKvE,EAAK6D,EACVW,EAAKvE,EAAK6D,EAEVZ,EAAKS,EAAKA,EAAKC,EAAKA,EACpBiB,EAAKN,EAAKA,EAAKC,EAAKA,EACpBrE,EAAI,IAAOwD,EAAKa,EAAKZ,EAAKW,GAE1B5E,GAAK6E,EAAKtB,EAAKU,EAAKiB,GAAM1E,EAC1BP,GAAK+D,EAAKkB,EAAKN,EAAKrB,GAAM/C,EAEhC,OAAOR,EAAIA,EAAIC,EAAIA,EAGvB,SAASoB,EAAa6C,EAAIC,EAAIC,EAAIC,EAAIhE,EAAIC,GACtC,IAAM0D,EAAKI,EAAKF,EACVD,EAAKI,EAAKF,EACVS,EAAKvE,EAAK6D,EACVW,EAAKvE,EAAK6D,EAEVZ,EAAKS,EAAKA,EAAKC,EAAKA,EACpBiB,EAAKN,EAAKA,EAAKC,EAAKA,EACpBrE,EAAI,IAAOwD,EAAKa,EAAKZ,EAAKW,GAKhC,MAAO,CAAC5E,EAHEkE,GAAMW,EAAKtB,EAAKU,EAAKiB,GAAM1E,EAG1BP,EAFDkE,GAAMH,EAAKkB,EAAKN,EAAKrB,GAAM/C,GAKzC,SAASkB,EAAUjC,EAAK+B,EAAO2D,EAAMC,GACjC,GAAIA,EAAQD,GAAQ,GAChB,IAAK,IAAIpF,EAAIoF,EAAO,EAAGpF,GAAKqF,EAAOrF,IAAK,CAIpC,IAHA,IAAMsF,EAAO5F,EAAIM,GACXuF,EAAW9D,EAAM6D,GACnBhD,EAAItC,EAAI,EACLsC,GAAK8C,GAAQ3D,EAAM/B,EAAI4C,IAAMiD,GAAU7F,EAAI4C,EAAI,GAAK5C,EAAI4C,KAC/D5C,EAAI4C,EAAI,GAAKgD,MAEd,CACH,IACItF,EAAIoF,EAAO,EACX9C,EAAI+C,EACRG,EAAK9F,EAHW0F,EAAOC,GAAU,EAGfrF,GACdyB,EAAM/B,EAAI0F,IAAS3D,EAAM/B,EAAI2F,KAASG,EAAK9F,EAAK0F,EAAMC,GACtD5D,EAAM/B,EAAIM,IAAMyB,EAAM/B,EAAI2F,KAASG,EAAK9F,EAAKM,EAAGqF,GAChD5D,EAAM/B,EAAI0F,IAAS3D,EAAM/B,EAAIM,KAAKwF,EAAK9F,EAAK0F,EAAMpF,GAItD,IAFA,IAAMsF,EAAO5F,EAAIM,GACXuF,EAAW9D,EAAM6D,KACV,CACT,GAAGtF,UAAYyB,EAAM/B,EAAIM,IAAMuF,GAC/B,GAAGjD,UAAYb,EAAM/B,EAAI4C,IAAMiD,GAC/B,GAAIjD,EAAItC,EAAG,MACXwF,EAAK9F,EAAKM,EAAGsC,GAEjB5C,EAAI0F,EAAO,GAAK1F,EAAI4C,GACpB5C,EAAI4C,GAAKgD,EAELD,EAAQrF,EAAI,GAAKsC,EAAI8C,GACrBzD,EAAUjC,EAAK+B,EAAOzB,EAAGqF,GACzB1D,EAAUjC,EAAK+B,EAAO2D,EAAM9C,EAAI,KAEhCX,EAAUjC,EAAK+B,EAAO2D,EAAM9C,EAAI,GAChCX,EAAUjC,EAAK+B,EAAOzB,EAAGqF,KAKrC,SAASG,EAAKC,EAAKzF,EAAGsC,GAClB,IAAMoD,EAAMD,EAAIzF,GAChByF,EAAIzF,GAAKyF,EAAInD,GACbmD,EAAInD,GAAKoD,ECzbb,SAASC,EAAaC,YAAAA,IAAAA,EAAO,GAC3B,IAAMC,EAAO,CACX,CAAC,EAAG,EAAG,GACP,EAAE,EAAG,EAAG,GACR,CAAC,GAAI,EAAG,GACR,EAAE,GAAI,EAAG,GACT,CAAC,EAAG,EAAG,GACP,EAAE,EAAG,EAAG,GACR,CAAC,EAAG,GAAI,GACR,EAAE,EAAG,GAAI,GACT,CAAC,EAAG,EAAG,GACP,CAAC,GAAI,EAAG,GACR,CAAC,EAAG,GAAI,GACR,CAAC,GAAI,GAAI,IAELC,EAAO,IAAIC,WAAW,KAEtBC,GAAM5H,KAAKgB,KAAK,GAAK,GAAK,EAE1B6G,GAAM,EAAI7H,KAAKgB,KAAK,IAAM,EAG1B8G,EAAO,SAAC/C,EAAGE,UAAMF,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,IACxC8C,EAAO,SAAChD,EAAGE,SAAM,CAACF,EAAE,GAAKE,EAAE,GAAIF,EAAE,GAAKE,EAAE,KA8C9C,sBAzCE,WAAYuC,YAAAA,IAAAA,EAAO,GACjB,IAAK,IAAI5F,EAAI,EAAGA,EAAI,IAAKA,IACvB8F,EAAK9F,GAAS,IAAJA,EAEZ,IAAK,IAAIA,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,IAAMgB,GAAM4E,EAAO/G,KAAKuH,KAAKpG,EAAI4F,KAAU,IAAM5F,GAAMA,EACjDqG,EAAMP,EAAK9F,GACjB8F,EAAK9F,EAAI,KAAO8F,EAAK9F,GAAK8F,EAAK9E,GAC/B8E,EAAK9E,EAAI,KAAO8E,EAAK9E,GAAKqF,GApCF,2BAuC5BC,QAAA,SAAQtD,GACN,IAAMuD,EAAIL,EAAKlD,EAAG,CAACgD,EAAIA,IACjBhC,EAAI,CAAC5F,KAAK6E,MAAMD,EAAE,GAAKuD,GAAInI,KAAK6E,MAAMD,EAAE,GAAKuD,IAC7CvG,EAAW,IAAPgE,EAAE,GACV1B,EAAW,IAAP0B,EAAE,GACFtB,EAAIwD,EAAKlC,EAAG,CAACiC,EAAIA,IAEjBxC,EAAK0C,EAAKnD,EAAGmD,EAAKnC,EAAG,CAACtB,EAAGA,KACzB8D,EAAI/C,EAAG,GAAKA,EAAG,GAAK,CAAC,EAAG,GAAK,CAAC,EAAG,GACjCG,EAAKuC,EAAKA,EAAK1C,EAAI+C,GAAI,EAAEP,GAAKA,IAC9BQ,EAAKN,EAAK1C,EAAI,CAAC,EAAI,EAAIwC,EAAI,EAAI,EAAIA,IAErCvH,EACFN,SAAAA,KAAKsI,IAAI,EAAG,GAAMR,EAAKzC,EAAIA,IAAQ,GACnCyC,EAAKL,EAAKC,EAAK9F,EAAI8F,EAAKxD,IAAM,IAAKmB,GAQrC,YAPA/E,GACEN,SAAAA,KAAKsI,IAAI,EAAG,GAAMR,EAAKtC,EAAIA,IAAQ,GACnCsC,EAAKL,EAAKC,EAAK9F,EAAIwG,EAAE,GAAKV,EAAKxD,EAAIkE,EAAE,KAAO,IAAK5C,IAEjDxF,SAAAA,KAAKsI,IAAI,EAAG,GAAMR,EAAKO,EAAIA,IAAQ,GACnCP,EAAKL,EAAKC,EAAK9F,EAAI,EAAI8F,EAAKxD,EAAI,IAAM,IAAKmE,OAI/CL,KAAA,SAAKpG,GAEH,IAAM2G,EAAM,aADZ3G,EAAI,YAAeA,GAAK,EAAKA,IACEA,GAAK,GACpC,OAAO2G,EAAOA,GAAO,UAGDf"}